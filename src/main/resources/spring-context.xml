<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"	
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/beans/spring-util-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"
	xmlns:aop="http://www.springframework.org/schema/aop">
	
		<!-- Scans within the base package of the application for @Components to  configure as beans -->
	<!-- @Controller, @Service, @Configuration, etc. -->
	<context:component-scan base-package="com.nodc.scraper">
		<context:exclude-filter type="regex" expression="com\.nodc\.scraper\.controller\..*"/>
	</context:component-scan>
	
	
<!-- 
	<import resource="simplesm-context.xml" />
 -->	
	<aop:aspectj-autoproxy />
<!-- 
  <bean name="defaultMemcachedClient" class="com.google.code.ssm.CacheFactory">
		<property name="defaultSerializationType"
			value="#{T(com.google.code.ssm.api.format.SerializationType).valueOf('JSON')}" />
    <property name="cacheClientFactory">
     	<bean name="cacheClientFactory" class="com.google.code.ssm.providers.spymemcached.MemcacheClientFactoryImpl"/>
    </property>
    <property name="addressProvider">
      <bean class="com.google.code.ssm.config.DefaultAddressProvider">
        <property name="address" value="127.0.0.1:11211" />
      </bean>
    </property>
    <property name="configuration">
      <bean class="com.google.code.ssm.providers.CacheConfiguration">
        <property name="consistentHashing" value="true" />
      </bean>
    </property>
  </bean>
 -->
 
 	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer"/>
 
	<bean name="awsS3Client" class="com.amazonaws.services.s3.AmazonS3Client">
		<constructor-arg index="0">
			<bean class="com.amazonaws.auth.BasicAWSCredentials">
 
			    <constructor-arg index="0" value="${AWS_ACCESS_KEY_ID}" /> <!--  pulled in via system prop -->
			    <constructor-arg index="1" value="${AWS_SECRET_KEY}" /> <!-- pulled in via system prop -->
 
			</bean>
		</constructor-arg>
	</bean>

	<bean name="awsDynamoDbClient" class="com.amazonaws.services.dynamodb.AmazonDynamoDBAsyncClient">
		<constructor-arg index="0">
			<bean class="com.amazonaws.auth.BasicAWSCredentials">

		    <constructor-arg index="0" value="${AWS_ACCESS_KEY_ID}" /> <!--  pulled in via system prop -->
		    <constructor-arg index="1" value="${AWS_SECRET_KEY}" /> <!-- pulled in via system prop -->
		    
			</bean>
		</constructor-arg>
	</bean>
		
	<bean id="frenchQtrGuideInvSource" class="com.nodc.scraper.inventory.FrenchQuarterGuideInventorySource">
		<property name="hotelDetailDAO" ref="hotelDetailDAO" />
		<property name="sourceHotelDAO" ref="sourceHotelDAO" />		
		<property name="masterHotelDAO" ref="masterHotelDAO" />
	</bean>	
				
	<bean id="nodcInvSource" class="com.nodc.scraper.inventory.NODCWarehouse">
		<property name="sourceHotelDAO" ref="sourceHotelDAO" />
		<property name="hotelDetailDAO" ref="hotelDetailDAO" />
		<property name="masterHotelDAO" ref="masterHotelDAO" />
	</bean>	

	<bean id="inventoryService" class="com.nodc.scraper.inventory.InventoryServiceImpl">
		<property name="NODCInventorySource" ref="nodcInvSource" />
		<property name="FQGInventorySource" ref="frenchQtrGuideInvSource" />
		<property name="sourceHotelDAO" ref="sourceHotelDAO" />
		<property name="hotelDetailDAO" ref="hotelDetailDAO"/>
	</bean>
	
	<beans profile="scheduleTasks">
 		<task:scheduler id="taskScheduler"/>
		<task:executor id="taskExecutor" pool-size="1"/> <!-- pool-size=1 ensures overlapping tasks run serially -->
		<task:annotation-driven executor="taskExecutor" scheduler="taskScheduler"/>
  </beans>
 	
</beans>